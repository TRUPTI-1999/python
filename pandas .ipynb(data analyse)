{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "65afa76e",
   "metadata": {},
   "source": [
    "#### Pandas seies"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c6ffd66",
   "metadata": {},
   "source": [
    "    .a pandas series like a column in table\n",
    "    . its a one-dimensional array holding data of any type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ecbfa1a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6edaf4f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7f37e873",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1.5.3'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd. __version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9f3f1a13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1.24.3'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.__version__"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e080c677",
   "metadata": {},
   "source": [
    "#### How to make empty Series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "02ef0a81",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Series([], dtype: float64)\n",
      "<class 'pandas.core.series.Series'>\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\lenovo\\AppData\\Local\\Temp\\ipykernel_19408\\2584896284.py:1: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n",
      "  a=pd.Series()\n"
     ]
    }
   ],
   "source": [
    "a=pd.Series()\n",
    "print(a)\n",
    "print(type(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d02bf74d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Series([], dtype: float64)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec6c2830",
   "metadata": {},
   "source": [
    "### How to make series from List"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c6c6a556",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a     virat\n",
      "b     Dhoni\n",
      "c    Hardik\n",
      "Name: cricketers, dtype: object\n"
     ]
    }
   ],
   "source": [
    "b=pd.Series([\"virat\",\"Dhoni\",\"Hardik\"],index=[\"a\",\"b\",\"c\"],name=\"cricketers\")\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "73210ec2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    1000\n",
      "1    2000\n",
      "2    3000\n",
      "Name: Runs, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "c=pd.Series([1000,2000,3000],name=\"Runs\")\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6d79deda",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    RCB\n",
      "1     MI\n",
      "2    KKR\n",
      "Name: team, dtype: object\n"
     ]
    }
   ],
   "source": [
    "d=pd.Series([\"RCB\",\"MI\",\"KKR\"],name=\"team\")\n",
    "print(d)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9520a13b",
   "metadata": {},
   "source": [
    "### How to make series from ndarray"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1805ca37",
   "metadata": {},
   "source": [
    "    list___array__>Series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "db3d87a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "49ec47f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    a\n",
       "1    b\n",
       "2    c\n",
       "dtype: object"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_array=np.array([\"a\",\"b\",\"c\"])\n",
    "my_array\n",
    "s1=pd.Series(my_array)\n",
    "s1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8d2e6678",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_array.ndim"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ce3b618",
   "metadata": {},
   "source": [
    "### How to make Series from dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "449036b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_dict={\"name\":\"Dhoni\",\"profesion\":\"Cricketer\",\"age\":41}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d5fda39e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'name': 'Dhoni', 'profesion': 'Cricketer', 'age': 41}"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "4ad60dfa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name             Dhoni\n",
       "profesion    Cricketer\n",
       "age                 41\n",
       "dtype: object"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s2=pd.Series(my_dict)\n",
    "s2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "5398c94a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1        Dhoni\n",
       "2    Cricketer\n",
       "3           41\n",
       "dtype: object"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_dict={1:\"Dhoni\",2:\"Cricketer\",3:41}\n",
    "my_dict\n",
    "s2=pd.Series(my_dict)\n",
    "s2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad47f1c5",
   "metadata": {},
   "source": [
    "### Create Series Using tuple"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "157ac4ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1\n",
       "1    2\n",
       "2    3\n",
       "3    4\n",
       "4    5\n",
       "dtype: int64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t=(1,2,3,4,5)\n",
    "s=pd.Series(t)\n",
    "s"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16a231c7",
   "metadata": {},
   "source": [
    "#### Create Series from Set        # set is unorderd that way they donot covert series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ae226a8e",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'set' type is unordered",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[34], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m s\u001b[38;5;241m=\u001b[39m{\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m2\u001b[39m,\u001b[38;5;241m3\u001b[39m,\u001b[38;5;241m4\u001b[39m,\u001b[38;5;241m5\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTrupti\u001b[39m\u001b[38;5;124m\"\u001b[39m}\n\u001b[1;32m----> 2\u001b[0m x\u001b[38;5;241m=\u001b[39mpd\u001b[38;5;241m.\u001b[39mSeries(s)\n\u001b[0;32m      3\u001b[0m x\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\series.py:470\u001b[0m, in \u001b[0;36mSeries.__init__\u001b[1;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[0;32m    468\u001b[0m         data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    469\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 470\u001b[0m     data \u001b[38;5;241m=\u001b[39m sanitize_array(data, index, dtype, copy)\n\u001b[0;32m    472\u001b[0m     manager \u001b[38;5;241m=\u001b[39m get_option(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.data_manager\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    473\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m manager \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\construction.py:611\u001b[0m, in \u001b[0;36msanitize_array\u001b[1;34m(data, index, dtype, copy, raise_cast_failure, allow_2d)\u001b[0m\n\u001b[0;32m    608\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    609\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(data, (\u001b[38;5;28mset\u001b[39m, \u001b[38;5;28mfrozenset\u001b[39m)):\n\u001b[0;32m    610\u001b[0m         \u001b[38;5;66;03m# Raise only for unordered sets, e.g., not for dict_keys\u001b[39;00m\n\u001b[1;32m--> 611\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mtype\u001b[39m(data)\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m type is unordered\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    613\u001b[0m     \u001b[38;5;66;03m# materialize e.g. generators, convert e.g. tuples, abc.ValueView\u001b[39;00m\n\u001b[0;32m    614\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(data, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m__array__\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n\u001b[0;32m    615\u001b[0m         \u001b[38;5;66;03m# e.g. dask array GH#38645\u001b[39;00m\n",
      "\u001b[1;31mTypeError\u001b[0m: 'set' type is unordered"
     ]
    }
   ],
   "source": [
    "s={1,2,3,4,5,\"Trupti\"}\n",
    "x=pd.Series(s)\n",
    "x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cc80681",
   "metadata": {},
   "source": [
    "#### Attributes of Series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "1a47e938",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "a     virat\n",
       "b     Dhoni\n",
       "c    Hardik\n",
       "Name: cricketers, dtype: object"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "25010ad1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a     virat\n",
      "b     Dhoni\n",
      "c    Hardik\n",
      "d    Sachin\n",
      "Name: cricketers, dtype: object\n"
     ]
    }
   ],
   "source": [
    "b=pd.Series([\"virat\",\"Dhoni\",\"Hardik\",\"Sachin\"],index=[\"a\",\"b\",\"c\",\"d\"],name=\"cricketers\")\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0820fdd2",
   "metadata": {},
   "source": [
    "### 1.Index\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9df680f5",
   "metadata": {},
   "source": [
    "    .Return all the index values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "2fd95259",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "a     virat\n",
       "b     Dhoni\n",
       "c    Hardik\n",
       "d    Sachin\n",
       "Name: cricketers, dtype: object"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "6732d8d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['a', 'b', 'c', 'd'], dtype='object')"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.index"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ec137f5",
   "metadata": {},
   "source": [
    "#### 2.array"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9240b7b4",
   "metadata": {},
   "source": [
    "     .return an array of values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "4e697c7a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<PandasArray>\n",
      "['virat', 'Dhoni', 'Hardik', 'Sachin']\n",
      "Length: 4, dtype: object\n"
     ]
    }
   ],
   "source": [
    "b_new=b.array\n",
    "print(b_new)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "3911b4ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.arrays.numpy_.PandasArray"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(b_new)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "63f3e046",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.series.Series"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c2eaa97",
   "metadata": {},
   "source": [
    "## 3.values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "795f1afd",
   "metadata": {},
   "source": [
    "     .Return Values of series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "098352f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['virat', 'Dhoni', 'Hardik', 'Sachin'], dtype=object)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4fb4da9",
   "metadata": {},
   "source": [
    "### 4.name"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e01134f5",
   "metadata": {},
   "source": [
    "    .return name of series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "a3c1ec25",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'cricketers'"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "7016d4d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0     1\n",
      "1     2\n",
      "2     3\n",
      "3     4\n",
      "4     5\n",
      "5     6\n",
      "6     7\n",
      "7    84\n",
      "Name: abc, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "v=[1,2,3,4,5,6,7,84]\n",
    "s=pd.Series(v,name=\"abc\")\n",
    "print(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "0d17d8e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'abc'"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s.name"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e829e0b5",
   "metadata": {},
   "source": [
    "#### 5.Shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb522ee9",
   "metadata": {},
   "source": [
    "    .Return Shape of Series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "3e702722",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4,)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "b354475a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8,)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "562ccca1",
   "metadata": {},
   "source": [
    "### 6.empty"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a52f08f",
   "metadata": {},
   "source": [
    "     >return true if series is empty"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "69b15f25",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.empty"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "6a92380b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s.empty"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "a7377488",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\lenovo\\AppData\\Local\\Temp\\ipykernel_19408\\2907974055.py:1: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n",
      "  empty_series=pd.Series()\n"
     ]
    }
   ],
   "source": [
    "empty_series=pd.Series()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "7c28e7ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "empty_series.empty"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8000cd10",
   "metadata": {},
   "source": [
    "#### 7.memory_usage(method or function)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0b04ed5",
   "metadata": {},
   "source": [
    "    .Return memory ocupied by value and indexs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "71beb8a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "236"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.memory_usage()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "35aeb7a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "196"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s.memory_usage()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "6618277f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "empty_series.memory_usage()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e58c7ca2",
   "metadata": {},
   "source": [
    "#### 8.nbytes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f03ad320",
   "metadata": {},
   "source": [
    "    .Return memory ocupied values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "f4b6f381",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.nbytes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "db27515c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "empty_series.nbytes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a376c774",
   "metadata": {},
   "source": [
    "### Series from list of tupples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "90d27539",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    (1, 0)\n",
       "1    (2, 0)\n",
       "2    (3, 0)\n",
       "dtype: object"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s4=pd.Series([(1,0),(2,0),(3,0)])\n",
    "s4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a287772",
   "metadata": {},
   "source": [
    "### Mathmatical operations on Series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "05ea674f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    10\n",
       "1    20\n",
       "2    30\n",
       "dtype: int64"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1=pd.Series([10,20,30])\n",
    "s1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "e7c5d98c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    15\n",
       "1    25\n",
       "2    35\n",
       "dtype: int64"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s2=pd.Series([15,25,35])\n",
    "s2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "ec6623e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    30\n",
       "1    50\n",
       "2    70\n",
       "dtype: int64"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1+s2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3191357b",
   "metadata": {},
   "source": [
    "#### add"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "ce70b08b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    30\n",
       "1    50\n",
       "2    70\n",
       "dtype: int64"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1.add(s2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "073cb517",
   "metadata": {},
   "source": [
    "### sub"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "12861bf2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0   -5\n",
       "1   -5\n",
       "2   -5\n",
       "dtype: int64"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1.subtract(s2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "03ce033d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     150\n",
       "1     500\n",
       "2    1050\n",
       "dtype: int64"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1.multiply(s2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "8007411f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0.666667\n",
       "1    0.800000\n",
       "2    0.857143\n",
       "dtype: float64"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1.divide(s2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c57b21d8",
   "metadata": {},
   "source": [
    "### modulous"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "80e40275",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    10\n",
       "1    20\n",
       "2    30\n",
       "dtype: int64"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1.mod(s2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "259fd71d",
   "metadata": {},
   "source": [
    "#### power"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "e5168c78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       1000000000000000\n",
       "1   -8028792235694751744\n",
       "2    -831484262388596736\n",
       "dtype: int64"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1.pow(s2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "c1c44bd6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    100\n",
       "1    400\n",
       "2    900\n",
       "dtype: int64"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1.pow(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4b29c16",
   "metadata": {},
   "source": [
    "#### less than"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "d036d51d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    True\n",
       "1    True\n",
       "2    True\n",
       "dtype: bool"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1.le(s2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de128df3",
   "metadata": {},
   "source": [
    "#### greater than"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "62ea8374",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    False\n",
       "1    False\n",
       "2    False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1.gt(s2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23faba08",
   "metadata": {},
   "source": [
    "#### equal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "0bab528b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s3=pd.Series([5,15,25])\n",
    "s4=pd.Series([5,15,25])\n",
    "s3.equals(s4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "24603dee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    10\n",
       "1    30\n",
       "2    50\n",
       "3    53\n",
       "dtype: int64"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s3=pd.Series([5,15,25,30])\n",
    "s4=pd.Series([5,15,25,23])\n",
    "s3.add(s4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b6e2e01",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
